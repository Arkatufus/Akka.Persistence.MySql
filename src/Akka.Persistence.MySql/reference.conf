akka.persistence{
	journal {
		plugin = "akka.persistence.journal.mysql"
		mysql {
			# qualified type name of the MySql persistence journal actor
			class = "Akka.Persistence.MySql.Journal.MySqlJournal, Akka.Persistence.MySql"

			# dispatcher used to drive journal actor
			plugin-dispatcher = "akka.actor.default-dispatcher"

			# connection string used for database access
			connection-string = ""

			# connection string name for .config file used when no connection string has been provided
			connection-string-name = ""

			# default MySql commands timeout
			connection-timeout = 30s

			# MySql table corresponding with persistent journal
			table-name = "event_journal"

			# should corresponding journal table be initialized automatically
			auto-initialize = off
			
			# timestamp provider used for generation of journal entries timestamps
			timestamp-provider = "Akka.Persistence.Sql.Common.Journal.DefaultTimestampProvider, Akka.Persistence.Sql.Common"

			# metadata table
			metadata-table-name = "metadata"

			# default serializer to use
			default-serializer = ""
			
			# Setting used to toggle sequential read access when loading large objects
			# from journals and snapshot stores.
			sequential-access = off
			
			# The isolation level of all database read query.
			# Isolation level documentation can be read here: 
			#   https://learn.microsoft.com/en-us/dotnet/api/system.data.isolationlevel?#fields
			# Valid values: "read-committed", "read-uncommitted", "repeatable-read", "serializable", "snapshot", or "unspecified"
			read-isolation-level = unspecified
			
			# The isolation level of all database read query.
			# Isolation level documentation can be read here: 
			#   https://learn.microsoft.com/en-us/dotnet/api/system.data.isolationlevel?#fields
			# Valid values: "read-committed", "read-uncommitted", "repeatable-read", "serializable", "snapshot", or "unspecified"
			write-isolation-level = unspecified
			
			# backward compatibility with akka.persistence.sql.common
			serializer = ${akka.persistence.journal.mysql.default-serializer}
		}
	}

	snapshot-store {
		plugin = "akka.persistence.snapshot-store.mysql"
		mysql {
			# qualified type name of the MySql persistence journal actor
			class = "Akka.Persistence.MySql.Snapshot.MySqlSnapshotStore, Akka.Persistence.MySql"

			# dispatcher used to drive journal actor
			plugin-dispatcher = "akka.actor.default-dispatcher"

			# connection string used for database access
			connection-string = ""

			# connection string name for .config file used when no connection string has been provided
			connection-string-name = ""

			# default MySql commands timeout
			connection-timeout = 30s

			# MySql table corresponding with persistent journal
			table-name = "snapshot_store"

			# should corresponding journal table be initialized automatically
			auto-initialize = off

			# default serializer to use
			default-serializer = ""
			
			# Setting used to toggle sequential read access when loading large objects
			# from journals and snapshot stores.
			sequential-access = off
			
			# The isolation level of all database read query.
			# Isolation level documentation can be read here: 
			#   https://learn.microsoft.com/en-us/dotnet/api/system.data.isolationlevel?#fields
			# Valid values: "read-committed", "read-uncommitted", "repeatable-read", "serializable", "snapshot", or "unspecified"
			read-isolation-level = unspecified
			
			# The isolation level of all database read query.
			# Isolation level documentation can be read here: 
			#   https://learn.microsoft.com/en-us/dotnet/api/system.data.isolationlevel?#fields
			# Valid values: "read-committed", "read-uncommitted", "repeatable-read", "serializable", "snapshot", or "unspecified"
			write-isolation-level = unspecified
			
			# backward compatibility with akka.persistence.sql.common
			serializer = ${akka.persistence.snapshot-store.mysql.default-serializer}
		}
	}
}